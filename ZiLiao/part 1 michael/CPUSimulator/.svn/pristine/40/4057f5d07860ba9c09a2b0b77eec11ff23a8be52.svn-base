package edu.gwu.core.basic;

import java.util.HashMap;
import java.util.Map;

/**
 * All the instructions will be defined in this class, including:
 * <br> name,code and every step(circle)
 * @author yangmang
 *
 */
public class InstructionSet {

	private static InstructionSet _instance;
	
	public static InstructionSet getInstance(){
		if(_instance==null)
			_instance = new InstructionSet();
		return _instance;
	}
	
	/**
	 * map for finding code by name
	 */
	private Map<String,Integer> name2code;
	/**
	 * map for finding InstructionCircles by code
	 */
	private Map<Integer,InstructionCircles> code2instrs;
	
	/**
	 * 
	 */
	public InstructionSet(){
		
		name2code = new HashMap<String,Integer>();
		code2instrs = new HashMap<Integer,InstructionCircles>();
		
		setLDR();
		
		setSTR();
		
		setLDA();
		
		setAMR();
		setSMR();
		
		setAIR();
		setSIR();
		
		
		
		setLDX();
		setSTX();
	}
	
	/**
	 *  LDR: Load Register From Memory
	 *  01
	 */
	private void setLDR(){
		InstructionCircles circles = new InstructionCircles();
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_REG2REG,"MAR","ADDR"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_MEM2REG,"MBR","MAR"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_REG2REG,"R","MBR"));
		circles.addCommonEndingCircles();
		
		name2code.put("LDR", 1);
		code2instrs.put(1, circles);
	}
	
	/**
	 * Store Register To Memory
	 * 02
	 */
	private void setSTR(){
		InstructionCircles circles = new InstructionCircles();
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_CALCULATE_EA));
		//circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_REG2REG,"MAR","EA"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_REG2MEM,"R","EA"));
		circles.addCommonEndingCircles();
		
		name2code.put("STR", 2);
		code2instrs.put(2, circles);
		
	}
	
	/**
	 * Load Register with Address
	 * 3
	 */
	private void setLDA(){
		
	}
	
	/**
	 * Add Memory To Register
	 * 4
	 */
	private void setAMR(){
		InstructionCircles circles = new InstructionCircles();
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_CALCULATE_EA));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_MEM2REG,"MBR","EA"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_LOAD_OP1_AND_OP2,"R","MBR"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_ALU_EXCUTE));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_REG2REG,"R","RES"));
		circles.addCommonEndingCircles();

		name2code.put("AMR", 4);
		code2instrs.put(4, circles);
	}
	
	/**
	 * Subtract Memory From Register
	 * 5
	 */
	private void setSMR(){
		InstructionCircles circles = new InstructionCircles();
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_CALCULATE_EA));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_MEM2REG,"MBR","EA"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_LOAD_OP1_AND_OP2,"R","MBR"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_ALU_EXCUTE));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_REG2REG,"R","RES"));
		circles.addCommonEndingCircles();

		name2code.put("SMR", 5);
		code2instrs.put(5, circles);
	}
	
	/**
	 * Add  Immediate to Register
	 * 6
	 */
	private void setAIR(){
		InstructionCircles circles = new InstructionCircles();
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_LOAD_OP1_AND_OP2,"R","ADDR"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_ALU_EXCUTE));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_REG2REG,"R","RES"));
		circles.addCommonEndingCircles();

		name2code.put("AIR", 6);
		code2instrs.put(6, circles);
	}
	
	/**
	 * Subtract  Immediate  from Register
	 * 7
	 */
	private void setSIR(){
		InstructionCircles circles = new InstructionCircles();
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_LOAD_OP1_AND_OP2,"R","ADDR"));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_ALU_EXCUTE));
		circles.addCircle(new InstructionCircle(InstructionCircle.TYPE_REG2REG,"R","RES"));
		circles.addCommonEndingCircles();

		name2code.put("SIR", 7);
		code2instrs.put(7, circles);
	}
	
	private void setLDX(){
		
	}
	
	private void setSTX(){
		
	}
	
	
	
	
//	public InstructionCircles getCircles2(String name){
//		return code2instrs.get(name2code.get(name));
//	}
//	public InstructionCircles getCircles2(int code){
//		return code2instrs.get(code);
//	}
	public static InstructionCircles getCircles(String name){
		return InstructionSet.getInstance().code2instrs.get(
				InstructionSet.getInstance().name2code.get(name));
	}
	public static InstructionCircles getCircles(int code){
		return InstructionSet.getInstance().code2instrs.get(code);
	}
	
	/**
	 * 
	 * @param name
	 * @return
	 */
	public static int getCodeOfInstruction(String name){
		return InstructionSet.getInstance().name2code.get(name);
	}
}
